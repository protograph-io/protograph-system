DROP TABLE IF EXISTS study_entries CASCADE;

DROP TABLE IF EXISTS study_entries_events_all CASCADE;

DROP TABLE IF EXISTS study_entries_events CASCADE;

DROP TABLE IF EXISTS study_docs_events CASCADE;

DROP TABLE IF EXISTS study_part1_training CASCADE;

DROP TABLE IF EXISTS study_part1_trials CASCADE;

DROP TABLE IF EXISTS study_part1_task1 CASCADE;

DROP TABLE IF EXISTS study_part1_task2 CASCADE;

DROP TABLE IF EXISTS study_part1_task3 CASCADE;

DROP TABLE IF EXISTS study_part2_training CASCADE;

DROP TABLE IF EXISTS study_part2_task1 CASCADE;

DROP TABLE IF EXISTS study_part2_task2 CASCADE;

DROP TABLE IF EXISTS study_part2_task3 CASCADE;

DROP TABLE IF EXISTS study_part2_task3_questions CASCADE;

DROP TABLE IF EXISTS study_part3 CASCADE;

DROP TABLE IF EXISTS study_survey_questions CASCADE;

create table study_entries (
  id uuid DEFAULT extensions.uuid_generate_v4(),
  prolific_pid text DEFAULT null,
  study_version int DEFAULT 1,
  events json NOT NULL,
  updated_at timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT current_timestamp,
  browser_width smallint NOT NULL,
  browser_height smallint NOT NULL,
  start_at timestamp with time zone DEFAULT NULL,
  end_at timestamp with time zone DEFAULT NULL,
  duration smallint DEFAULT NULL,
  primary key (id)
);

alter table
  study_entries enable row level security;

create policy "Allow select" on study_entries for
select
  using (true);

-- create policy "Public study_entries are viewable by everyone."
--   on study_entries for select
--   using ( true );
create policy "Public are insertable by everyone." on study_entries for
insert
  with check (true);

create policy "Public study_entries are updateable by everyone." on study_entries for
update
  using (true);

create table study_consent (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  study_id uuid references study_entries ON DELETE CASCADE NOT NULL,
  prolific_pid text DEFAULT null,
  consented boolean NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT current_timestamp -- events json NOT NULL,
  -- primary key (study_id)
);

alter table
  study_consent enable row level security;

create policy "Allow select" on study_consent for
select
  using (true);

create policy "Public are insertable by everyone." on study_consent for
insert
  with check (true);

create table study_entries_events_all (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  study_id uuid references study_entries ON DELETE CASCADE NOT NULL,
  events json NOT NULL,
  prefix text,
  partition smallint,
  created_at timestamp with time zone NOT NULL DEFAULT current_timestamp
);

alter table
  study_entries_events_all enable row level security;

create policy "Allow select" on study_entries_events_all for
select
  using (true);

create policy "Public are insertable by everyone." on study_entries_events_all for
insert
  with check (true);

create policy "Public study_entries_events_all are updateable by everyone." on study_entries_events_all for
update
  using (true);

create table study_entries_events (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  study_id uuid references study_entries ON DELETE CASCADE NOT NULL,
  events json NOT NULL,
  location text DEFAULT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT current_timestamp
);

alter table
  study_entries_events enable row level security;

create policy "Allow select" on study_entries_events for
select
  using (true);

create policy "Public are insertable by everyone." on study_entries_events for
insert
  with check (true);

-- -- STEP 1 : Definition
CREATE
OR REPLACE FUNCTION trigger_set_timestamp() RETURNS TRIGGER AS $ $ BEGIN NEW.updated_at = NOW();

RETURN NEW;

END;

$ $ LANGUAGE plpgsql;

-- Step 3: Create the trigger
CREATE TRIGGER set_timestamp BEFORE
UPDATE
  ON study_entries FOR EACH ROW EXECUTE PROCEDURE trigger_set_timestamp();

-- -- Prevent prolific pid from changing
-- create function check_id_change() returns trigger language plpgsql as $$
-- begin
--   new.prolific_pid = old.prolific_pid;
--   return new;
-- end $$;
-- CREATE TRIGGER client_update_trigger AFTER UPDATE ON study_entries FOR EACH ROW
--       EXECUTE PROCEDURE check_id_change();
create table study_docs_events (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  study_id uuid references study_entries ON DELETE CASCADE NOT NULL,
  action text not null,
  page text not null,
  location text DEFAULT NULL,
  position text NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT current_timestamp
);

alter table
  study_docs_events enable row level security;

create policy "Allow select" on study_docs_events for
select
  using (true);

create policy "Public are insertable by everyone." on study_docs_events for
insert
  with check (true);

create table study_part1_training (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  study_id uuid references study_entries ON DELETE CASCADE NOT NULL,
  start_at timestamp with time zone NOT NULL,
  end_at timestamp with time zone NOT NULL,
  duration smallint NOT NULL,
  code text NOT NULL,
  previews text [] NOT NULL,
  main_render text NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT current_timestamp -- events json NOT NULL,
);

alter table
  study_part1_training enable row level security;

create policy "Allow select" on study_part1_training for
select
  using (true);

create policy "Public are insertable by everyone." on study_part1_training for
insert
  with check (true);

create table study_part1_trials (
  --   id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  study_id uuid references study_entries ON DELETE CASCADE NOT NULL,
  start_at timestamp with time zone NOT NULL,
  end_at timestamp with time zone NOT NULL,
  duration smallint NOT NULL,
  code text NOT NULL,
  previews text [] NOT NULL,
  main_render text NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT current_timestamp,
  -- events json NOT NULL,
  primary key (study_id)
);

alter table
  study_part1_trials enable row level security;

create policy "Allow select" on study_part1_trials for
select
  using (true);

create policy "Public are insertable by everyone." on study_part1_trials for
insert
  with check (true);

create table study_part1_task1 (
  --   id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  study_id uuid references study_entries ON DELETE CASCADE NOT NULL,
  start_at timestamp with time zone NOT NULL,
  end_at timestamp with time zone NOT NULL,
  duration smallint NOT NULL,
  code text NOT NULL,
  previews text [] NOT NULL,
  main_render text NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT current_timestamp,
  -- events json NOT NULL,
  primary key (study_id)
);

alter table
  study_part1_task1 enable row level security;

create policy "Allow select" on study_part1_task1 for
select
  using (true);

create policy "Public are insertable by everyone." on study_part1_task1 for
insert
  with check (true);

create table study_part1_task2 (
  --   id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  study_id uuid references study_entries ON DELETE CASCADE NOT NULL,
  start_at timestamp with time zone NOT NULL,
  end_at timestamp with time zone NOT NULL,
  duration smallint NOT NULL,
  code text NOT NULL,
  previews text [] NOT NULL,
  main_render text NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT current_timestamp,
  -- events json NOT NULL,
  primary key (study_id)
);

alter table
  study_part1_task2 enable row level security;

create policy "Allow select" on study_part1_task2 for
select
  using (true);

create policy "Public are insertable by everyone." on study_part1_task2 for
insert
  with check (true);

create table study_part1_task3 (
  --   id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  study_id uuid references study_entries ON DELETE CASCADE NOT NULL,
  start_at timestamp with time zone NOT NULL,
  end_at timestamp with time zone NOT NULL,
  duration smallint NOT NULL,
  code text NOT NULL,
  previews text [] NOT NULL,
  main_render text NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT current_timestamp,
  -- events json NOT NULL,
  primary key (study_id)
);

alter table
  study_part1_task3 enable row level security;

create policy "Allow select" on study_part1_task3 for
select
  using (true);

create policy "Public are insertable by everyone." on study_part1_task3 for
insert
  with check (true);

create table study_part2_training (
  --   id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  study_id uuid references study_entries ON DELETE CASCADE NOT NULL,
  start_at timestamp with time zone NOT NULL,
  end_at timestamp with time zone NOT NULL,
  duration smallint NOT NULL,
  svg text NOT NULL,
  png text NOT NULL,
  json_export json NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT current_timestamp,
  -- events json NOT NULL,
  primary key (study_id)
);

alter table
  study_part2_training enable row level security;

create policy "Allow select" on study_part2_training for
select
  using (true);

create policy "Public are insertable by everyone." on study_part2_training for
insert
  with check (true);

create table study_part2_task1 (
  --   id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  study_id uuid references study_entries ON DELETE CASCADE NOT NULL,
  start_at timestamp with time zone NOT NULL,
  end_at timestamp with time zone NOT NULL,
  duration smallint NOT NULL,
  svg text NOT NULL,
  png text NOT NULL,
  json_export json NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT current_timestamp,
  -- events json NOT NULL,
  primary key (study_id)
);

alter table
  study_part2_task1 enable row level security;

create policy "Allow select" on study_part2_task1 for
select
  using (true);

create policy "Public are insertable by everyone." on study_part2_task1 for
insert
  with check (true);

create table study_part2_task2 (
  --   id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  study_id uuid references study_entries ON DELETE CASCADE NOT NULL,
  start_at timestamp with time zone NOT NULL,
  end_at timestamp with time zone NOT NULL,
  duration smallint NOT NULL,
  svg text NOT NULL,
  png text NOT NULL,
  json_export json NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT current_timestamp,
  -- events json NOT NULL,
  primary key (study_id)
);

alter table
  study_part2_task2 enable row level security;

create policy "Allow select" on study_part2_task2 for
select
  using (true);

create policy "Public are insertable by everyone." on study_part2_task2 for
insert
  with check (true);

create table study_part2_task3 (
  --   id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  study_id uuid references study_entries ON DELETE CASCADE NOT NULL,
  start_at timestamp with time zone NOT NULL,
  end_at timestamp with time zone NOT NULL,
  duration smallint NOT NULL,
  svg text NOT NULL,
  png text NOT NULL,
  json_export json NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT current_timestamp,
  -- events json NOT NULL,
  primary key (study_id)
);

alter table
  study_part2_task3 enable row level security;

create policy "Allow select" on study_part2_task3 for
select
  using (true);

create policy "Public are insertable by everyone." on study_part2_task3 for
insert
  with check (true);

create table study_part2_task3_questions (
  --   id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  study_id uuid references study_entries ON DELETE CASCADE NOT NULL,
  start_at timestamp with time zone NOT NULL,
  end_at timestamp with time zone NOT NULL,
  duration smallint NOT NULL,
  answer_1 text NOT NULL,
  answer_2 text NOT NULL,
  answer_3 text NOT NULL,
  answer_4 text NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT current_timestamp,
  -- events json NOT NULL,
  primary key (study_id)
);

alter table
  study_part2_task3_questions enable row level security;

create policy "Allow select" on study_part2_task3_questions for
select
  using (true);

create policy "Public are insertable by everyone." on study_part2_task3_questions for
insert
  with check (true);

-- Create a table for Public prototypes
create table study_part3 (
  study_id uuid references study_entries ON DELETE CASCADE NOT NULL,
  start_at timestamp with time zone NOT NULL,
  end_at timestamp with time zone NOT NULL,
  duration smallint NOT NULL,
  code text NOT NULL,
  -- events json NOT NULL,
  previews text [] NOT NULL,
  main_render text NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT current_timestamp,
  primary key (study_id)
);

alter table
  study_part3 enable row level security;

create policy "Allow select" on study_part3 for
select
  using (true);

create policy "Public are insertable by everyone." on study_part3 for
insert
  with check (true);

create table study_survey_questions (
  study_id uuid references study_entries ON DELETE CASCADE NOT NULL,
  start_at timestamp with time zone NOT NULL,
  end_at timestamp with time zone NOT NULL,
  duration smallint NOT NULL,
  gender text NOT NULL,
  education text NOT NULL,
  familiarity smallint NOT NULL,
  experience smallint NOT NULL,
  usefulness smallint NOT NULL,
  usefulness_explanation text DEFAULT NULL,
  learnability smallint NOT NULL,
  learnability_explanation text DEFAULT NULL,
  readability smallint NOT NULL,
  readability_explanation text DEFAULT NULL,
  usability smallint NOT NULL,
  usability_explanation text DEFAULT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT current_timestamp,
  primary key (study_id)
);

alter table
  study_survey_questions enable row level security;

create policy "Allow select" on study_survey_questions for
select
  using (true);

create policy "Public are insertable by everyone." on study_survey_questions for
insert
  with check (true);

-- -- Storage
-- -- Set up Storage!
-- insert into storage.buckets (id, name)
-- values ('events', 'events');
-- create policy "events images are publicly accessible."
--   on storage.objects for select
--   using ( bucket_id = 'events' );
-- create policy "Anyone can upload an events."
--   on storage.objects for insert
--   with check ( bucket_id = 'events' );
-- create policy "Anyone can update an events."
--   on storage.objects for update
--   using ( bucket_id = 'events' );
-- -- Set up Storage!
-- insert into storage.buckets (id, name)
-- values ('stage_events', 'stage_events');
-- create policy "stage_events images are publicly accessible."
--   on storage.objects for select
--   using ( bucket_id = 'stage_events' );
-- create policy "Anyone can upload an stage_events."
--   on storage.objects for insert
--   with check ( bucket_id = 'stage_events' );
-- create policy "Anyone can update an stage_events."
--   on storage.objects for update
--   using ( bucket_id = 'stage_events' );